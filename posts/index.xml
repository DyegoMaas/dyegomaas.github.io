<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Dyego Maas</title>
    <link>https://dyegomaas.github.io/posts/</link>
    <description>Recent content in Posts on Dyego Maas</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-BR</language>
    <lastBuildDate>Thu, 23 Apr 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://dyegomaas.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Entrega contínua de blogs Hugo com GitHub Actions</title>
      <link>https://dyegomaas.github.io/posts/continuous-delivery-blog-com-hugo/</link>
      <pubDate>Thu, 23 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dyegomaas.github.io/posts/continuous-delivery-blog-com-hugo/</guid>
      <description>O Hugo é hoje um dos melhores e mais populares geradores de sites estáticos. Já o GitHub Pages oferece um excelente serviço para distribuir gratuitamente conteúdos estáticos, o que é perfeito para blogs. Logo, é natural que as duas ferramentas sejam comumente usadas em conjunto.
A partir do momento que o blog estiver todo configurado, com todos os templates customizados da forma como queremos, o dia-a-dia do blog passa a revolver em torno da criação de conteúdo.</description>
    </item>
    
    <item>
      <title>Test Builders - Boas práticas</title>
      <link>https://dyegomaas.github.io/posts/test-builders-csharp-boas-praticas/</link>
      <pubDate>Wed, 22 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dyegomaas.github.io/posts/test-builders-csharp-boas-praticas/</guid>
      <description>Neste post, vamos explorar algumas boas práticas na escrita de Test Data Builders. Mas para entender o que são &amp;ldquo;bons&amp;rdquo; builders, primeiro precisamos entender o que são builders &amp;ldquo;ruins&amp;rdquo;.
&amp;ldquo;Bom&amp;rdquo; e &amp;ldquo;ruim&amp;rdquo; são distinções claramente subjetivas, e os exemplos que listei abaixo são baseados na minha experiência pessoal e refletem a minha opinião apenas.
Erros comuns e Antipatterns Builders ajudam bastante, mas temos que tomar alguns cuidados. Vamos ver alguns antipatterns comuns que já observei muitas pessoas fazendo (inclusive eu).</description>
    </item>
    
    <item>
      <title>Simplificando setup de testes com Test Builders</title>
      <link>https://dyegomaas.github.io/posts/test-builders-csharp-intro/</link>
      <pubDate>Sun, 19 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dyegomaas.github.io/posts/test-builders-csharp-intro/</guid>
      <description>Implementar uma boa suíte de testes unitários para nossos projetos pode ser muito recompensador, e na maioria dos casos, é indispensável. Mas, se não tomarmos certos cuidados, a manutenção desta suíte pode se tornar tediosa e até terrivelmente trabalhosa.
Vejamos um cenário muito comum, e que pode ser resolvido facilmente com o design pattern Builder aplicado a testes para obter o que chamamos de test data builders, ou simplesmente test builders.</description>
    </item>
    
  </channel>
</rss>