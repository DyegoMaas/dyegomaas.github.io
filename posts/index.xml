<?xml version="1.0" encoding="utf-8" standalone="yes"?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Blog Dyego Maas</title>
    <link>https://blog.dyegomaas.com.br/posts/</link>
    <description>Recent content in Posts on Blog Dyego Maas</description>   
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-BR</language>
    <lastBuildDate>Wed, 08 Jul 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.dyegomaas.com.br/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Apprenticeship Patternsx</title>
      <link>https://blog.dyegomaas.com.br/posts/resenha-apprenticeship-patterns/</link>
      <pubDate>Wed, 08 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dyegomaas.com.br/posts/resenha-apprenticeship-patterns/</guid>
      <description>Apprenticeship Patterns: Guidance for the Aspiring Software Craftsman foi um dos melhores livros que li em muito tempo. Uma guia completo para todo aquele que deseja perseguir uma carreira com desenvolvimento de software.
   Neste livro, Dave Hoover, Adewale Oshineye fizeram um magnífico trabalho ao compilar a sabedoria e experiência de vários dos melhores profissionais mundo afora, trazendo exemplos de inúmeras situações que um desenvolvedor vai enfrentar ao longo da sua carreira, tudo num formato bastante simples e fácil entender, chamado Language Patterns.</description>

      
      
      
      
      
        
        
      
      
      
      <enclosure url="https://blog.dyegomaas.com.br/posts/resenha-apprenticeship-patterns/img/cover-apprenticeship-patterns.png" type="image/png"/>      
    </item>
    
    <item>
      <title>Como implementei a busca offline para o meu site estático feito em Hugox</title>
      <link>https://blog.dyegomaas.com.br/posts/como-implementei-busca-offline-blog/</link>
      <pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dyegomaas.com.br/posts/como-implementei-busca-offline-blog/</guid>
      <description>Este blog começou como um experimento e um objetivo: não custar nada no fim do mês.
Por isso decidi criar um site estático com um gerador chamado Hugo. Isso significa que não existe um backend para o blog; não existe uma arquitetura Cliente/Servidor, apenas o cliente, e todo o conteúdo do site é pré-renderizado.
Mas nem por isso ele precisa ser muito restrito em funcionalidades. Não é a falta de um servidor que impediria ter um recurso de busca de conteúdo no site.</description>

      
      
      
      
      
        
        
      
      
      
      <enclosure url="https://blog.dyegomaas.com.br/posts/como-implementei-busca-offline-blog/img/cover-lunr.png" type="image/png"/>      
    </item>
    
    <item>
      <title>Como visualizar o desenvolvimento de projetos com Gourcex</title>
      <link>https://blog.dyegomaas.com.br/posts/como-visualizar-desenvolvimento-com-gource/</link>
      <pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dyegomaas.com.br/posts/como-visualizar-desenvolvimento-com-gource/</guid>
      <description>O Gource é uma ferramenta open-source que permite visualizar o desenvolvimento de projetos de software com base num sistema de controle de versão como Git, Mercurial, Bazaar and SVN.
Por exemplo, esta é uma visualização de quase 2 horas de toda a história de desenvolvimento do kernel do Linux de 1991 a 2015:
  Esse tipo de visualização pode ter várias utilidades. Para um projeto open-source, pode servir como reconhecimento ao trabalho de uma comunidade engajada.</description>

      
      
      
      
      
        
        
      
      
      
      <enclosure url="https://blog.dyegomaas.com.br/posts/como-visualizar-desenvolvimento-com-gource/img/cover-gource.png" type="image/png"/>      
    </item>
    
    <item>
      <title>Arquitetura Gritantex</title>
      <link>https://blog.dyegomaas.com.br/posts/arquitetura-gritante/</link>
      <pubDate>Wed, 03 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dyegomaas.com.br/posts/arquitetura-gritante/</guid>
      <description>Um dos meus capítulos preferidos do livro Arquitetura Limpa, do Robert C. Martin (o Uncle Bob) é um chamado Arquitetura Gritante.
O conceito é muito simples, mas certamente nos faz refletir sobre como estruturamos nossas aplicações, e como a estrutura escolhida dá uma cara para uma aplicação.
 O tema da aplicação deve ser evidente na sua estrutura.
 À primeira vista, esta fala pode parecer óbvia, mas vamos ver alguns exemplos para entender as nuances do problema.</description>

      
      
      
      
      
      <enclosure url="https://blog.dyegomaas.com.br/posts/img/posts/social-media.png" type="image/png"/>      
    </item>
    
    <item>
      <title>Pattern matching no C# 8.0x</title>
      <link>https://blog.dyegomaas.com.br/posts/pattern-matching-csharp/</link>
      <pubDate>Wed, 27 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dyegomaas.com.br/posts/pattern-matching-csharp/</guid>
      <description>A partir do C# 7.0 a linguagem começou a receber funcionalidades que fazem uso de um recurso de programação funcional chamado pattern matching. A maioria desses recursos é derivada do F# e a introdução deles no C# visa facilitar a vida do desenvolvedor e solução de certos tipos de problemas.
São recursos muito poderosos e que simplificam em muito alguns tipos de construções.
Como os recursos de pattern matching do C# 8.</description>

      
      
      
      
      
      <enclosure url="https://blog.dyegomaas.com.br/posts/img/posts/social-media.png" type="image/png"/>      
    </item>
    
    <item>
      <title>Como implementar Health Checks para sua aplicação usando as extensões do ASP.NET Core 3.0x</title>
      <link>https://blog.dyegomaas.com.br/posts/healthchecks-aspnetcore3/</link>
      <pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dyegomaas.com.br/posts/healthchecks-aspnetcore3/</guid>
      <description>O ASP.NET Core 3.0 fornece uma forma bastante prática de implementar um endpoint para checar a saúde de uma aplicação.
Um endpoint de Health Check bem implementado pode nos ajudar de inúmeras formas a manter uma aplicação rodando. Podemos usá-los em conjunto com o liveness probes do Kubernetes, por exemplo, para que ele possa verificar a saúde de um serviço e assim poder reiniciá-lo caso as coisas dêem errado. Ferramentas de monitoramento também podem fazer uso desses endpoints para gerar alertas e estatísticas.</description>

      
      
      
      
      
      <enclosure url="https://blog.dyegomaas.com.br/posts/img/posts/social-media.png" type="image/png"/>      
    </item>
    
    <item>
      <title>Testes de integração mais rápidos com Docker e MongoDB em memóriax</title>
      <link>https://blog.dyegomaas.com.br/posts/testes-mais-rapidos-com-mongodb-inmemory/</link>
      <pubDate>Wed, 13 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dyegomaas.com.br/posts/testes-mais-rapidos-com-mongodb-inmemory/</guid>
      <description>A forma mais fácil de configurar o MongoDB para rodar em memória é utilizando um sistema de arquivos do tipo tmpfs.
Os sistemas de arquivo tmpfs não armazenam os dados em dispositivos de armazenamento permanentes, como HDs, pendrives, etc. Ao invés disso, manipulam os dados diretamente na memória RAM, ou seja, são voláteis. Por isso, muitas distribuições Unix os utilizam para diretório temporário /tmp ou até para compartilhamento de memória.</description>

      
      
      
      
      
        
        
      
      
      
      <enclosure url="https://blog.dyegomaas.com.br/posts/testes-mais-rapidos-com-mongodb-inmemory/img/cover.png" type="image/png"/>      
    </item>
    
    <item>
      <title>Testes de mutação com Stryker.NETx</title>
      <link>https://blog.dyegomaas.com.br/posts/testes-mutacao-stryker-net/</link>
      <pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dyegomaas.com.br/posts/testes-mutacao-stryker-net/</guid>
      <description>A realidade do desenvolvimento nos dias atuais demanda agir rápido. Nossos produtos precisam ser capazes de mudar quase tão rapidamente quanto o comportamento e as demandas dos nossos clientes. Precisamos ser capazes de correr. De entregar rápido e errar rápido. De aprender com os erros e seguir em frente. E a única forma segura de seguir em frente num ritmo alucinante é seguir com qualidade.
Os testes unitários são uma das principais ferramentas do desenvolvedor para garantir um desenvolvimento com qualidade.</description>

      
      
      
      
      
        
        
      
      
      
      <enclosure url="https://blog.dyegomaas.com.br/posts/testes-mutacao-stryker-net/img/cover.png" type="image/png"/>      
    </item>
    
    <item>
      <title>Entrega contínua de blogs Hugo com GitHub Actionsx</title>
      <link>https://blog.dyegomaas.com.br/posts/continuous-delivery-blog-com-hugo/</link>
      <pubDate>Wed, 29 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dyegomaas.com.br/posts/continuous-delivery-blog-com-hugo/</guid>
      <description>O Hugo é hoje um dos melhores e mais populares geradores de sites estáticos. Já o GitHub Pages oferece um excelente serviço para distribuir gratuitamente conteúdos estáticos, o que é perfeito para blogs. Logo, é natural que as duas ferramentas sejam comumente usadas em conjunto.
A partir do momento que o blog estiver todo configurado, com todos os templates customizados da forma como queremos, o dia-a-dia do blog passa a revolver em torno da criação de conteúdo.</description>

      
      
      
      
      
        
        
      
      
      
      <enclosure url="https://blog.dyegomaas.com.br/posts/continuous-delivery-blog-com-hugo/img/cover.png" type="image/png"/>      
    </item>
    
    <item>
      <title>Boas práticas para implementar Test Data Builders em C#x</title>
      <link>https://blog.dyegomaas.com.br/posts/test-builders-csharp-boas-praticas/</link>
      <pubDate>Wed, 22 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dyegomaas.com.br/posts/test-builders-csharp-boas-praticas/</guid>
      <description>Neste post, vamos explorar algumas boas práticas na escrita de Test Data Builders. Mas para entender o que são &amp;ldquo;bons&amp;rdquo; builders, primeiro precisamos entender o que são builders &amp;ldquo;ruins&amp;rdquo;.
&amp;ldquo;Bom&amp;rdquo; e &amp;ldquo;ruim&amp;rdquo; são distinções claramente subjetivas, e os exemplos que listei abaixo são baseados na minha experiência pessoal e refletem a minha opinião apenas.
Erros comuns e Antipatterns Builders ajudam bastante, mas temos que tomar alguns cuidados. Vamos ver alguns antipatterns comuns que já observei muitas pessoas fazendo (inclusive eu).</description>

      
      
      
      
      
      <enclosure url="https://blog.dyegomaas.com.br/posts/img/posts/social-media.png" type="image/png"/>      
    </item>
    
    <item>
      <title>Simplificando setup de testes em C# com Test Data Buildersx</title>
      <link>https://blog.dyegomaas.com.br/posts/test-builders-csharp-intro/</link>
      <pubDate>Sun, 19 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dyegomaas.com.br/posts/test-builders-csharp-intro/</guid>
      <description>Implementar uma boa suíte de testes unitários para nossos projetos pode ser muito recompensador, e na maioria dos casos, é indispensável. Mas, se não tomarmos certos cuidados, a manutenção desta suíte pode se tornar tediosa e até terrivelmente trabalhosa.
Vejamos um cenário muito comum, e que pode ser resolvido facilmente com o design pattern Builder aplicado a testes para obter o que chamamos de test data builders, ou simplesmente test builders.</description>

      
      
      
      
      
      <enclosure url="https://blog.dyegomaas.com.br/posts/img/posts/social-media.png" type="image/png"/>      
    </item>
    
  </channel>
</rss>