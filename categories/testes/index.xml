<?xml version="1.0" encoding="utf-8" standalone="yes"?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Testes on Blog Dyego Maas</title>
    <link>https://blog.dyegomaas.com.br/categories/testes/</link>
    <description>Recent content in Testes on Blog Dyego Maas</description>   
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-BR</language>
    <lastBuildDate>Wed, 13 Oct 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.dyegomaas.com.br/categories/testes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>O melhor e o pior tipo de testes para microserviços</title>
      <link>https://blog.dyegomaas.com.br/posts/artigo-melhor-e-pior-tipos-teste-para-microservicos/</link>
      <pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dyegomaas.com.br/posts/artigo-melhor-e-pior-tipos-teste-para-microservicos/</guid>
      <description>Não há dúvidas que a presença de bons testes é indispensável para garantir a qualidade de um microserviço. O que muita gente não se dá conta, é que algumas categorias de testes podem ser nocivas à produtividade de um time e devem ser evitadas. Existem também categorias de teste cujo retorno sobre investimento é absurdamente grande. Neste artigo, exploro esse cenário a fim de demonstrar quais são os melhores tipos de teste para aplicar em microserviços.</description>

      
      
        
        
        
          
        
      
      
      
      <enclosure url="https://blog.dyegomaas.com.br/posts/artigo-melhor-e-pior-tipos-teste-para-microservicos/img/featured.jpg" type="image/jpg" />
    </item>
    
    <item>
      <title>Como implementar test builders em C# com ForeverFactory</title>
      <link>https://blog.dyegomaas.com.br/posts/artigo-test-builders-com-foreverfactory/</link>
      <pubDate>Wed, 11 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dyegomaas.com.br/posts/artigo-test-builders-com-foreverfactory/</guid>
      <description>Nos artigos anteriores da série, exploramos como o uso de test builders pode simplificar a construção de testes.
 Neste artigo, apresento a biblioteca ForeverFactory, que se propõe a simplificar a construção de builders ao mesmo tempo que maximiza a reutilização de configurações.
 Por que criei a ForeverFactory? Gosto muito da abordagem de escrever test builders artesanais, totalmente customizados para os cenários de um software, como apresentado neste outro artigo, fazê-los sempre desta forma pode ser bastante repetitivo.</description>

      
      
      
      
      <enclosure url="https://blog.dyegomaas.com.br/img/posts/social-media.png" type="image/png" />
    </item>
    
    <item>
      <title>Ping-pong Pair Programming</title>
      <link>https://blog.dyegomaas.com.br/posts/artigo-ping-pong-pair-programming/</link>
      <pubDate>Wed, 29 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dyegomaas.com.br/posts/artigo-ping-pong-pair-programming/</guid>
      <description>Duas cabeças pensam melhor que uma, já dizia o ditado. E muitas vezes é verdade mesmo. Por isso, a prática da programação em par, ou pair programming tem ganhado tanta força mundo afora.
Pair programming A ideia básica é simples: tal como no rally, em que o piloto e o navegador colaboram para vencer a corrida, no pair programming a dupla colabora numa dinâmica parecida.
  Um programador assume o papel de piloto (e o teclado), e o outro de navegador, responsável por acompanhar o desenvolvimento e antecipar os próximos passos.</description>

      
      
        
        
        
          
        
      
      
      
      <enclosure url="https://blog.dyegomaas.com.br/posts/artigo-ping-pong-pair-programming/img/cover-tdd-cycle.png" type="image/png" />
    </item>
    
    <item>
      <title>Testes de integração mais rápidos com Docker e MongoDB em memória</title>
      <link>https://blog.dyegomaas.com.br/posts/artigo-testes-mais-rapidos-com-mongodb-inmemory/</link>
      <pubDate>Wed, 13 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dyegomaas.com.br/posts/artigo-testes-mais-rapidos-com-mongodb-inmemory/</guid>
      <description>A forma mais fácil de configurar o MongoDB para rodar em memória é utilizando um sistema de arquivos do tipo tmpfs.
Os sistemas de arquivo tmpfs não armazenam os dados em dispositivos de armazenamento permanentes, como HDs, pendrives, etc. Ao invés disso, manipulam os dados diretamente na memória RAM, ou seja, são voláteis. Por isso, muitas distribuições Unix os utilizam para diretório temporário /tmp ou até para compartilhamento de memória.</description>

      
      
        
        
        
          
        
      
      
      
      <enclosure url="https://blog.dyegomaas.com.br/posts/artigo-testes-mais-rapidos-com-mongodb-inmemory/img/cover.png" type="image/png" />
    </item>
    
    <item>
      <title>Testes de mutação com Stryker.NET</title>
      <link>https://blog.dyegomaas.com.br/posts/artigo-testes-mutacao-stryker-net/</link>
      <pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dyegomaas.com.br/posts/artigo-testes-mutacao-stryker-net/</guid>
      <description>A realidade do desenvolvimento nos dias atuais demanda agir rápido. Nossos produtos precisam ser capazes de mudar quase tão rapidamente quanto o comportamento e as demandas dos nossos clientes. Precisamos ser capazes de correr. De entregar rápido e errar rápido. De aprender com os erros e seguir em frente. E a única forma segura de seguir em frente num ritmo alucinante é seguir com qualidade.
Os testes unitários são uma das principais ferramentas do desenvolvedor para garantir um desenvolvimento com qualidade.</description>

      
      
        
        
        
          
        
      
      
      
      <enclosure url="https://blog.dyegomaas.com.br/posts/artigo-testes-mutacao-stryker-net/img/cover.png" type="image/png" />
    </item>
    
    <item>
      <title>Boas práticas para implementar Test Data Builders em C#</title>
      <link>https://blog.dyegomaas.com.br/posts/artigo-test-builders-csharp-boas-praticas/</link>
      <pubDate>Wed, 22 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dyegomaas.com.br/posts/artigo-test-builders-csharp-boas-praticas/</guid>
      <description>Neste post, vamos explorar algumas boas práticas na escrita de Test Data Builders. Mas para entender o que são &amp;ldquo;bons&amp;rdquo; builders, primeiro precisamos entender o que são builders &amp;ldquo;ruins&amp;rdquo;.
&amp;ldquo;Bom&amp;rdquo; e &amp;ldquo;ruim&amp;rdquo; são distinções claramente subjetivas, e os exemplos que listei abaixo são baseados na minha experiência pessoal e refletem a minha opinião apenas.
Erros comuns e Antipatterns Builders ajudam bastante, mas temos que tomar alguns cuidados. Vamos ver alguns antipatterns comuns que já observei muitas pessoas fazendo (inclusive eu).</description>

      
      
        
        
        
          
          
            
            
          
        
      
      
      
      <enclosure url="https://blog.dyegomaas.com.br/img/posts/social-media.png" type="image/png" />
    </item>
    
    <item>
      <title>Simplificando setup de testes em C# com Test Data Builders</title>
      <link>https://blog.dyegomaas.com.br/posts/artigo-test-builders-csharp-intro/</link>
      <pubDate>Sun, 19 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dyegomaas.com.br/posts/artigo-test-builders-csharp-intro/</guid>
      <description>Implementar uma boa suíte de testes unitários para nossos projetos pode ser muito recompensador, e na maioria dos casos, é indispensável. Mas, se não tomarmos certos cuidados, a manutenção desta suíte pode se tornar tediosa e até terrivelmente trabalhosa.
Vejamos um cenário muito comum, e que pode ser resolvido facilmente com o design pattern Builder aplicado a testes para obter o que chamamos de test data builders, ou simplesmente test builders.</description>

      
      
      
      
      <enclosure url="https://blog.dyegomaas.com.br/img/posts/social-media.png" type="image/png" />
    </item>
    
  </channel>
</rss>