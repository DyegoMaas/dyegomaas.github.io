<?xml version="1.0" encoding="utf-8" standalone="yes"?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>foreverfactory on Blog Dyego Maas</title>
    <link>https://blog.dyegomaas.com.br/tags/foreverfactory/</link>
    <description>Recent content in foreverfactory on Blog Dyego Maas</description>   
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-BR</language>
    <lastBuildDate>Wed, 09 Jun 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.dyegomaas.com.br/tags/foreverfactory/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Versionamento semântico simplificado com MinVer</title>
      <link>https://blog.dyegomaas.com.br/posts/artigo-versionamento-semantico-com-minver/</link>
      <pubDate>Wed, 09 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dyegomaas.com.br/posts/artigo-versionamento-semantico-com-minver/</guid>
      <description>MinVer é uma ferramenta extremamente útil para facilitar o versionamento semântico de assemblies .NET usando Git tags.
O versionamento semântico, de acordo com o SemVer 2.0.0, segue a seguinte estrutura: [Major].[Minor].[Patch]. Resumindo:
 Quando a Major sobe, isso indica que ouve uma grande mudança, e possível quebra de compatibilidade com as versões anteriores Quando a Minor sobe, isso indica adição de funcionalidade, sem perda de compatibilidade Quando o Patch sobe, isso indica correções ou melhorias  Versionamento semântico mal feito Tradicionalmente, a forma como controlamos a versão de um assembly é através da tag &amp;lt;PackageVersion&amp;gt;1.</description>

      
      
      
      
      
      <enclosure url="https://blog.dyegomaas.com.br/tags/foreverfactory/img/posts/social-media.png" type="image/png"/>      
    </item>
    
  </channel>
</rss>