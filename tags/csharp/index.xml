<?xml version="1.0" encoding="utf-8" standalone="yes"?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>csharp on Blog Dyego Maas</title>
    <link>https://blog.dyegomaas.com.br/tags/csharp/</link>
    <description>Recent content in csharp on Blog Dyego Maas</description>   
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-BR</language>
    <lastBuildDate>Wed, 02 Sep 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.dyegomaas.com.br/tags/csharp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Explorando o MediatR</title>
      <link>https://blog.dyegomaas.com.br/posts/artigo-mediatr/</link>
      <pubDate>Wed, 02 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dyegomaas.com.br/posts/artigo-mediatr/</guid>
      <description>O MediatR é uma biblioteca pouco ambiciosa, feita para resolver um problema bem específico: como, dentro de um processo, desacoplar o envio de mensagens do manuseio das mesmas? E o MediatR faz isso de forma simples e elegante.
MediatR A biblioteca foi criada por Jimmy Bogard, o mesmo autor do AutoMapper, e está atualmente na sua quinta versão. Um item bacana é que a biblioteca não tem dependências.
Requests e Handlers O que eu mais gosto do MediatR é a forma como ele facilita mover toda lógica de negócio da camada de apresentação para a camada de aplicação.</description>

      
      
      
      
      
      <enclosure url="https://blog.dyegomaas.com.br/tags/csharp/img/posts/social-media.png" type="image/png"/>      
    </item>
    
    <item>
      <title>Pattern matching no C# 8.0</title>
      <link>https://blog.dyegomaas.com.br/posts/artigo-pattern-matching-csharp/</link>
      <pubDate>Wed, 27 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dyegomaas.com.br/posts/artigo-pattern-matching-csharp/</guid>
      <description>A partir do C# 7.0 a linguagem começou a receber funcionalidades que fazem uso de um recurso de programação funcional chamado pattern matching. A maioria desses recursos é derivada do F# e a introdução deles no C# visa facilitar a vida do desenvolvedor e solução de certos tipos de problemas.
São recursos muito poderosos e que simplificam em muito alguns tipos de construções.
Como os recursos de pattern matching do C# 8.</description>

      
      
      
      
      
      <enclosure url="https://blog.dyegomaas.com.br/tags/csharp/img/posts/social-media.png" type="image/png"/>      
    </item>
    
    <item>
      <title>Como implementar Health Checks para sua aplicação usando as extensões do ASP.NET Core 3.0</title>
      <link>https://blog.dyegomaas.com.br/posts/artigo-healthchecks-aspnetcore3/</link>
      <pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dyegomaas.com.br/posts/artigo-healthchecks-aspnetcore3/</guid>
      <description>O ASP.NET Core 3.0 fornece uma forma bastante prática de implementar um endpoint para checar a saúde de uma aplicação.
Um endpoint de Health Check bem implementado pode nos ajudar de inúmeras formas a manter uma aplicação rodando. Podemos usá-los em conjunto com o liveness probes do Kubernetes, por exemplo, para que ele possa verificar a saúde de um serviço e assim poder reiniciá-lo caso as coisas dêem errado. Ferramentas de monitoramento também podem fazer uso desses endpoints para gerar alertas e estatísticas.</description>

      
      
      
      
      
      <enclosure url="https://blog.dyegomaas.com.br/tags/csharp/img/posts/social-media.png" type="image/png"/>      
    </item>
    
    <item>
      <title>Testes de mutação com Stryker.NET</title>
      <link>https://blog.dyegomaas.com.br/posts/artigo-testes-mutacao-stryker-net/</link>
      <pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dyegomaas.com.br/posts/artigo-testes-mutacao-stryker-net/</guid>
      <description>A realidade do desenvolvimento nos dias atuais demanda agir rápido. Nossos produtos precisam ser capazes de mudar quase tão rapidamente quanto o comportamento e as demandas dos nossos clientes. Precisamos ser capazes de correr. De entregar rápido e errar rápido. De aprender com os erros e seguir em frente. E a única forma segura de seguir em frente num ritmo alucinante é seguir com qualidade.
Os testes unitários são uma das principais ferramentas do desenvolvedor para garantir um desenvolvimento com qualidade.</description>

      
      
      
      
      
        
        
      
      
      
      <enclosure url="https://blog.dyegomaas.com.br/posts/artigo-testes-mutacao-stryker-net/img/cover.png" type="image/png"/>      
    </item>
    
    <item>
      <title>Boas práticas para implementar Test Data Builders em C#</title>
      <link>https://blog.dyegomaas.com.br/posts/artigo-test-builders-csharp-boas-praticas/</link>
      <pubDate>Wed, 22 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dyegomaas.com.br/posts/artigo-test-builders-csharp-boas-praticas/</guid>
      <description>Neste post, vamos explorar algumas boas práticas na escrita de Test Data Builders. Mas para entender o que são &amp;ldquo;bons&amp;rdquo; builders, primeiro precisamos entender o que são builders &amp;ldquo;ruins&amp;rdquo;.
&amp;ldquo;Bom&amp;rdquo; e &amp;ldquo;ruim&amp;rdquo; são distinções claramente subjetivas, e os exemplos que listei abaixo são baseados na minha experiência pessoal e refletem a minha opinião apenas.
Erros comuns e Antipatterns Builders ajudam bastante, mas temos que tomar alguns cuidados. Vamos ver alguns antipatterns comuns que já observei muitas pessoas fazendo (inclusive eu).</description>

      
      
      
      
      
      <enclosure url="https://blog.dyegomaas.com.br/tags/csharp/img/posts/social-media.png" type="image/png"/>      
    </item>
    
    <item>
      <title>Simplificando setup de testes em C# com Test Data Builders</title>
      <link>https://blog.dyegomaas.com.br/posts/artigo-test-builders-csharp-intro/</link>
      <pubDate>Sun, 19 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dyegomaas.com.br/posts/artigo-test-builders-csharp-intro/</guid>
      <description>Implementar uma boa suíte de testes unitários para nossos projetos pode ser muito recompensador, e na maioria dos casos, é indispensável. Mas, se não tomarmos certos cuidados, a manutenção desta suíte pode se tornar tediosa e até terrivelmente trabalhosa.
Vejamos um cenário muito comum, e que pode ser resolvido facilmente com o design pattern Builder aplicado a testes para obter o que chamamos de test data builders, ou simplesmente test builders.</description>

      
      
      
      
      
      <enclosure url="https://blog.dyegomaas.com.br/tags/csharp/img/posts/social-media.png" type="image/png"/>      
    </item>
    
  </channel>
</rss>