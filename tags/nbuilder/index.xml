<?xml version="1.0" encoding="utf-8" standalone="yes"?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nbuilder on Blog Dyego Maas</title>
    <link>https://blog.dyegomaas.com.br/tags/nbuilder/</link>
    <description>Recent content in nbuilder on Blog Dyego Maas</description>   
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-BR</language>
    <lastBuildDate>Wed, 11 Aug 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.dyegomaas.com.br/tags/nbuilder/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Como implementar test builders em C# com ForeverFactory</title>
      <link>https://blog.dyegomaas.com.br/posts/artigo-test-builders-com-foreverfactory/</link>
      <pubDate>Wed, 11 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dyegomaas.com.br/posts/artigo-test-builders-com-foreverfactory/</guid>
      <description>Nos artigos anteriores da série, exploramos como o uso de test builders pode simplificar a construção de testes.
 Neste artigo, apresento a biblioteca ForeverFactory, que se propõe a simplificar a construção de builders ao mesmo tempo que maximiza a reutilização de configurações.
 Por que criei a ForeverFactory? Gosto muito da abordagem de escrever test builders artesanais, totalmente customizados para os cenários de um software, como apresentado neste outro artigo, fazê-los sempre desta forma pode ser bastante repetitivo.</description>

      
      
      
      
      
      <enclosure url="https://blog.dyegomaas.com.br/tags/nbuilder/img/posts/social-media.png" type="image/png"/>      
    </item>
    
  </channel>
</rss>