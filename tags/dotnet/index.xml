<?xml version="1.0" encoding="utf-8" standalone="yes"?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dotnet on Blog Dyego Maas</title>
    <link>https://blog.dyegomaas.com.br/tags/dotnet/</link>
    <description>Recent content in dotnet on Blog Dyego Maas</description>   
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-BR</language>
    <lastBuildDate>Wed, 02 Sep 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.dyegomaas.com.br/tags/dotnet/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Explorando o MediatR</title>
      <link>https://blog.dyegomaas.com.br/posts/artigo-mediatr/</link>
      <pubDate>Wed, 02 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dyegomaas.com.br/posts/artigo-mediatr/</guid>
      <description>O MediatR é uma biblioteca pouco ambiciosa, feita para resolver um problema bem específico: como, dentro de um processo, desacoplar o envio de mensagens do manuseio das mesmas? E o MediatR faz isso de forma simples e elegante.
MediatR A biblioteca foi criada por Jimmy Bogard, o mesmo autor do AutoMapper, e está atualmente na sua quinta versão. Um item bacana é que a biblioteca não tem dependências.
Requests e Handlers O que eu mais gosto do MediatR é a forma como ele facilita mover toda lógica de negócio da camada de apresentação para a camada de aplicação.</description>

      
      
      
      
      
      <enclosure url="https://blog.dyegomaas.com.br/tags/dotnet/img/posts/social-media.png" type="image/png"/>      
    </item>
    
  </channel>
</rss>